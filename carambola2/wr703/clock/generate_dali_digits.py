#!/usr/bin/python
# (c) 2015 juewei@fabfolk.com
#
# digit pattern generator.

import time
import sys
import os
from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw
import StringIO

#Load a TTF font
# font = { 'size':13, 'off':[0,0.7], 'name':'Ubuntu-B.ttf' }
# font = { 'size':13, 'off':[0,0], 'name':'LiberationSans-Regular.ttf' }
font = { 'size':13, 'off':[1,0.5], 'name':'LiberationSans-Bold.ttf' }

font['font'] = ImageFont.truetype(font['name'], font['size'])


lines=9
columns=6

def gamma255():
    r=[]
    for i in range(256):
        r.append(int(i*i/256))
    return r

gamma_lut = gamma255()

def render_text(columns, lines, font, text, nogamma=False):
    im = Image.new("L", (columns, lines), "black")
    draw = ImageDraw.Draw(im)
    fontwidth, fontheight = font['font'].getsize(text)
    # print fontwidth, fontheight

    # put text on its baseline, and horizontally centered.
    draw.text(((columns-fontwidth)/2+font['off'][0],lines-fontheight+font['off'][1]), text, 255, font=font['font'])

    if (nogamma): return list(im.getdata())
    return map(lambda x:gamma_lut[x], list(im.getdata()))


def print_ascii(img, w, h):
    ascii_ramp = " .-:=+*#%@"
    stride = w
    for y in range(h):
        for x in range(w):
            v = img[stride*y+x]
	    ch = ascii_ramp[v*len(ascii_ramp)/256]
	    sys.stdout.write("%c%c" % (ch,ch))
	print ""
 

def lua_list(seq):
    return '{' + ','.join(map(lambda x:str(x),seq)) + '}'


def interpolate_1d(f, v1, v2):
    if (f < 0.0 or f > 1.0): raise ValueError
    return (1-f)*v1 + f*v2


def interpolate_dali(img1, img2, w, h, f):
    out=[0] * (w*h)
    threshold=50
    for y in range(h):
        xstart1=0
	xstart2=0
	xend1=w-1
	xend2=w-1
        for x in range(w): 
            if img1[w*y+x] > threshold: xstart1=x; break
        for x in reversed(range(xstart1,w)): 
            if img1[w*y+x] > threshold: xend1=x; break
        for x in range(w):
            if img2[w*y+x] > threshold: xstart2=x; break
        for x in reversed(range(xstart2,w)): 
            if img2[w*y+x] > threshold: xend2=x; break
	# print "y=",y, xstart1,xend1, xstart2,xend2

        xstart=int(interpolate_1d(f, xstart1, xstart2)+0.5)
        xend=int(interpolate_1d(f, xend1, xend2)+0.5)

	if (xend == xstart):
          if (xstart > 0):
            xstart -= 1
          else:
            xend += 1

        stepw1=float(xend1-xstart1)/(xend-xstart)
        stepw2=float(xend2-xstart2)/(xend-xstart)

	for x in range(xstart, xend+1):
            xsrc1=(x-xstart)*stepw1+xstart1
            xf1=xsrc1-int(xsrc1)
            xsrc1=int(xsrc1)

            xsrc2=(x-xstart)*stepw2+xstart2
            xf2=xsrc2-int(xsrc2)
            xsrc2=int(xsrc2)

            # print(x, ":", xsrc1,xf1, w*y+min(xsrc1+1,w-1), '-', xsrc2,xf2, w*y+min(xsrc2+1,w-1) )
	    v = interpolate_1d(f,
		  interpolate_1d(xf1, img1[w*y+xsrc1],img1[ w*y+min(xsrc1+1,w-1) ]),
		  interpolate_1d(xf2, img2[w*y+xsrc2],img2[ w*y+min(xsrc2+1,w-1) ]))
            out[w*y+x] = int(min(255, v))
    return out


def morph_digit(img1, img2, steps):
    r = []
    for i in range(steps):
        m=interpolate_dali(img1, img2, columns, lines, float(i)/(steps-1))
	r.append(m)
        # print_ascii(m, columns, lines)  
        # print "--------------------"
    return r


def lua_morph_digit(img, digit, advance, nsteps):
    """ returns a list of lists as a lua-formatted string, containing
        { img[digit], ... interpolated steps ..., img[digit+advance] }
    """
    digit2 = (digit+advance) % 10
    # print_ascii(img[digit], columns, lines)  
    # print ""
    # print_ascii(img[(digit+1)%10], columns, lines)  
    # print ""
    lua_lol = lua_list([lua_list(img[digit])] 
                     + map(lambda x:lua_list(x), morph_digit(img[digit], img[digit2], nsteps)) 
                     + [lua_list(img[digit2])])
    return lua_lol


steps=15
img=[]
for i in "0123456789":
    img.append(render_text(columns, lines, font, i))

dali_digits = """-- dali_digits.lua

-- CAUTION: autogenerated by """ + sys.argv[0] + """
--
-- dali_digits is a """ + str(columns) + ' x ' + str(lines) + """ rendering using the font
-- """ + font['name'] + " at size " + str(font['size']) + """. It is represented as 
-- antialiased grayscale maps with background 0 and forground 255.

-- counting in lua starts at index 1.
-- dali_digits[1] represents the digit '0' and its morphings toward digit '1'.
--  ... and so on ...
-- dali_digits[10] represents the digit '9' and its morphings toward digit '0'.

-- dali_digits[n][1] is the original digit, the morphings are in 
-- dali_digits[n][2] .. dali_digits[n][#dali_digits[n]] where the last element
-- is identical to dali_digits[(n+1)%10][1]

dali_digits = {
"""

for i in range(10):
    print_ascii(img[i], columns, lines)  
    print ""
    dali_digits += "    " + lua_morph_digit(img, i, +1, steps)
    if (i < 9): dali_digits += ','
    dali_digits += "\n"
dali_digits += "}\n"

print font['name'] + ", 10 digits, morphing steps: ", steps
f=open('dali_digits.lua', 'w')
print >>f, dali_digits
f.close()

